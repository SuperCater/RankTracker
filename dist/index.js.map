{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import axios from 'axios'\n\nexport type Data = {\n\tname: string,\n\tid: number,\n\tranks: Array<number>,\n\troles: Array<{\n\t\tid: number,\n\t\tname: string,\n\t\trank: number,\n\t\tmembers: Array<{\n\t\t\tid: number,\n\t\t\tusername: string,\n\t\t}>\n\t}>\n}\n\nexport type diffData = {\n\tchanges: Array<{\n\t\tuser: {\n\t\t\tid: number,\n\t\t\tusername: string,\n\t\t},\n\t\toldRole: {\n\t\t\tname: string,\n\t\t\trank: number,\n\t\t},\n\t\tnewRole: {\n\t\t\tname: string,\n\t\t\trank: number,\n\t\t}\n\t}>\n}\n\nexport type roles = {\n\tgroupId: number,\n\troles: Array<{\n\t\tid: number,\n\t\tname: string,\n\t\trank: number,\n\t\tmemberCount: number\n\t}>\n}\n\nconst get = async (url: string) => {\n\ttry {\n\t\treturn await axios.get(url).then(res => res.data)\n\t} catch (e) {\n\t\tconsole.log(e)\n\t\treturn null\n\t}\n}\n\nexport type RankTrackerType = {\n\tindex: (groupID: string, options?: Object) => Promise<Data | null>;\n\tdiff: (first: Data, second: Data, options?: Object) => Promise<diffData>;\n}\n\nexport type Options = {\n\t// Nothing here yet\n\tranks?: Array<number>\n}\n\nconst groupURL = \"https://groups.roblox.com/v1/groups/\"\n\nconst RankTracker: RankTrackerType = {\n\tindex: async (groupID: string, options?: Options) => {\n\t\tlet group\n\t\ttry {\n\t\t\tgroup = await get(groupURL + groupID)\n\t\t} catch (e) {\n\t\t\tconsole.log(e)\n\t\t\treturn null\n\t\t}\n\t\t// Get the group roles\n\t\tconst roles : roles = await get(groupURL + groupID + \"/roles\")\n\t\tlet data : Data = {\n\t\t\tname: group.name,\n\t\t\tid: group.id,\n\t\t\tranks: [15, 25, 30, 32, 35, 45, 50], // Set this to the ranks to track\n\t\t\troles: []\n\t\t}\n\t\tfor (const role of roles.roles) {\n\t\t\tif (!data.ranks.includes(role.rank) && data.ranks.length !== 0) continue\n\t\t\tdata.roles.push({\n\t\t\t\tid: role.id,\n\t\t\t\tname: role.name,\n\t\t\t\trank: role.rank,\n\t\t\t\tmembers: []\n\t\t})\n\t\tlet next\n\t\tconst roleInfo = data.roles.find(r => r.id === role.id)\n\t\twhile (true) {\n\t\t\tlet link = groupURL + group.id + \"/roles/\" + role.id + \"/users?limit=100\"\n\t\t\tif (next) link += \"&cursor=\" + next\n\t\t\tconst data = await get(link)\n\t\t\tfor (const member of data.data) {\n\t\t\t\troleInfo?.members.push({\n\t\t\t\t\tid: member.userId,\n\t\t\t\t\tusername: member.username,\n\t\t\t\t})\n\t\t\t}\n\t\t\tnext = data.nextPageCursor\n\t\t\tif (next === null) break;\n\t\t}\n\t}\n\treturn data\n\t},\n\tdiff : async (first: Data, second : Data, Options: Object = {}) => {\n\t\tconst diffData : diffData = {\n\t\t\tchanges : []\n\t\t}\n\n\t\tfor (const role1 of first.roles) { // Loop through all roles\n\t\t\tconst role2 = second.roles.find(r => r.id === role1.id) // Get the second role\n\t\t\tif (!role2) continue // skip if the role doesn't exist\n\t\t\t// Validate each member\n\t\t\tfor (const member of role1.members) { // Got through all members in the first role\n\t\t\t\tif (!role2.members.find(m => m.id === member.id)) { // Check if the member is in the second role\n\t\t\t\t\t// try to find their old rank\n\t\t\t\t\tlet newRoleInfo\n\t\t\t\t\tlet newRole = second.roles.find(r => r.members.find(m => m.id === member.id)) // If they are not in the second role, try to find their new role from the new index\n\t\t\t\t\tif (newRole === undefined) { // If they are not in the new index, try and fetch it from the api\n\t\t\t\t\t\tconst usersRoles = await get(`https://groups.roblox.com/v2/users/${member.id}/groups/roles`)\n\t\t\t\t\t\tconst groupInfo = usersRoles.data.find((r: any) => r.group.id === second.id)\n\t\t\t\t\t\tif (!groupInfo) {\n\t\t\t\t\t\t\tnewRoleInfo = {\n\t\t\t\t\t\t\t\tname: \"Guest\",\n\t\t\t\t\t\t\t\trank: 0\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else { // If they are in the api, set them to their new role\n\t\t\t\t\t\t\tnewRoleInfo = {\n\t\t\t\t\t\t\t\tname: groupInfo.role.name,\n\t\t\t\t\t\t\t\trank: groupInfo.role.rank\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewRoleInfo = {\n\t\t\t\t\t\t\tname: newRole.name,\n\t\t\t\t\t\t\trank: newRole.rank\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst member2 = newRole.members.find(m => m.id === member.id)\n\t\t\t\t\t\t// Check if their username has changed\n\t\t\t\t\t\tif (member.username != member2?.username) {\n\t\t\t\t\t\t\tconsole.log(`${member.username} (${member.id}) changed their username to ${member2?.username}`)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnewRole.members.splice(newRole.members.findIndex(m => m.id === member.id), 1)\n\t\t\t\t\t}\n\t\t\t\t\tdiffData.changes.push({\n\t\t\t\t\t\tuser: {\n\t\t\t\t\t\t\tid: member.id,\n\t\t\t\t\t\t\tusername: member.username,\n\t\t\t\t\t\t},\n\t\t\t\t\t\toldRole: {\n\t\t\t\t\t\t\tname: role1.name,\n\t\t\t\t\t\t\trank: role1.rank,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnewRole: {\n\t\t\t\t\t\t\tname: newRoleInfo.name,\n\t\t\t\t\t\t\trank: newRoleInfo.rank,\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\tconsole.log(`${member.username} (${member.id}) was changed to ${newRoleInfo.name} from ${role1.name}`)\n\t\t\t\t} else {\n\t\t\t\t\tconst member2 = role2.members.find(m => m.id === member.id)\n\t\t\t\t\t// Check if their username has changed\n\t\t\t\t\tif (member.username != member2?.username) {\n\t\t\t\t\t\tconsole.log(`${member.username} (${member.id}) changed their username to ${member2?.username}`)\n\t\t\t\t\t}\n\t\t\t\t\trole2.members.splice(role2.members.findIndex(m => m.id === member.id), 1)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const role2 of second.roles) {\n\t\t\tfor (const member of role2.members) {\n\t\t\t\tconsole.log(`${member.username} (${member.id}) was added to ${role2.name}`)\n\t\t\t\tdiffData.changes.push({\n\t\t\t\t\tuser: {\n\t\t\t\t\t\tid: member.id,\n\t\t\t\t\t\tusername: member.username,\n\t\t\t\t\t},\n\t\t\t\t\toldRole: {\n\t\t\t\t\t\tname: \"Unkown\",\n\t\t\t\t\t\trank: 0,\n\t\t\t\t\t},\n\t\t\t\t\tnewRole: {\n\t\t\t\t\t\tname: role2.name,\n\t\t\t\t\t\trank: role2.rank,\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\treturn diffData\n\t}\n}\n\n\nmodule.exports = RankTracker"],"mappings":"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","names":["axios","data"]}